export EDITOR=vim
export PATH=$HOME/bin:$PATH
export GCC_COLORS=always
alias ag='ag --color-line-number 31'

cus="$HOME/Projects/cusdb"
cus2="$HOME/Projects/cusdb2"
sprd="$HOME/Projects/sprdb"
sprd2="$HOME/Projects/sprdb2"

setdb() {
	local prj=$1
	case $prj in
		"7731")		prj=sp7731geaplus_dt_oversea-userdebug;;
		"7731c")	prj=sp7731ceb_dt_oversea-userdebug;;
		"9830")		prj=sp9830aec4mh100dtoversea-userdebug;;
		"9832")		prj=sp9832iea4mvolteoversea-userdebug;;
		*)
			if [ -z $prj ]; then
				echo "available options: 7731, 7731c, 9830, 9832"
				return 1
			fi
			echo "external project name"
			echo $prj
			;;
	esac

	while ! lunch $prj 2> /dev/null; do
		. build/envsetup.sh || return 128
	done

	PATH=${PATH//java\/jdk1.6.0_29/lib\/jvm\/java-7-openjdk-amd64}
	return 0
}

lndb() {
	local prj=$HOME/Projects
	local base=${1}
	local def=base
	
	case $base in
		"s")	base=$sprd;;
		"ss")	base=$sprd2;;
		"c")	base=$cus;;
		"cc")	base=$cus2;;
		*)
			echo "unsupported code base"
			echo "available: s, ss, c, cc"
			return 128
			;;
	esac

	rm -rf $prj/$def
	ln -sf $base $prj/$def
	echo "create default link"
	ls -l $prj/$def
	return 0
}

lsdb() {
	out="out/target/product"
	# Todo: remove out
	quota -s; echo ""
	for d in $sprd $sprd2 $cus $cus2; do
		local branch=`awk '/<default/{print $0}' $d/.repo/manifest.xml |
		awk '{
			i = 1
			while(i <= NF) {
				split($i, str, "=")
				if (match(str[1], "revision")) {
					print str[2]
					break
				}
				i++
			}
		}'`
		echo "$d: --> ${branch//\"/}"
		du -hs $d/$out/* 2> /dev/null || echo "no dir"; echo ""
	done
	return 0;
}

go() {
	base=$1
	case $base in
		"s")	cd $sprd;;
		"ss")	cd $sprd2;;
		"c")	cd $cus;;
		"cc")	cd $cus2;;
		*)
			echo "unsupported code base"
			echo "available: s, ss, c, cc"
			return 128
			;;
	esac
	return 0;
}

syncdb() {
	local REF=/home8/karlliang/Projects/ref
	local URL=gittpe@10.8.1.39:android/platform/manifest.git
	local init_cmds="-u $URL --reference=$REF --no-repo-verify"
	local sync_cmds="-dcqf -j8 --no-repo-verify"
	local opt=$1
	local prj=$2
	local retry=0

	##
	# 1. new .xml, create new .repo
	# 2. new .xml
	# 3. new branch, create new .repo
	# 4. new branch
	# 5. old branch
	##
 
	if [ -z $opt ]; then # old branch
		echo "default repo sync"
		if [ ! -e .repo ]; then
			echo ".repo not exist"
			return 128
		fi
	elif [ -e $opt ]; then # xml exist
		local xml=${opt##*/}
		# FIXME: potiential bug here
		local branch=`awk '/default/{print $3}' $opt | tr -d \" | awk -F= '{print $2}'`
		if [ -e .repo ]; then # with .repo
			cp $opt .repo/manifests/
			repo init $init_cmds -m $xml
			return 0
		else # without .repo
			echo "get branch from $opt: $branch" 
			repo init $init_cmds -b $branch -m $xml
		fi
	else # new branch
		local branch=$opt
		echo "init .repo with $branch"
		repo init $init_cmds -b $branch
	fi

	while ! repo sync $sync_cmds $prj && [ $retry -le 20 ]; do
		echo "re-connect"
		retry=$((retry+1))
	done

	return 0
}
